---
title: "Fundamental algorithms I"
subtitle: Introduction to Python
---

# Introduction to Python

## What is Python?

::: {.columns}
:::: {.column width=50%}

**Python** is an **interpreted** **high-level** language.
It is a **multiparadigm** language since it supports **object-oriented programming**, **imperative programming**, and, to a lesser extent, **functional programming**.
It is a **dynamically typed** and **cross-platform** language.

- **Not compiled**: Interpreted
- **High level**: Easy and abstract
- **Dynamically typed**: Variables are not bound to a type (*names*)
- **AI**: numpy, pandas, scikit-learn, tensorflow, etc.

<https://python.org/>

::::
:::: {.column width=50%}

![](../../resources/images/python.png){width=80% fig-align="center"}

::::
:::

## Motivation

Python is the most popular programming language: \url{https://spectrum.ieee.org/top-programming-languages-2024}.

::: {.columns}
:::: {.column width=50%}

### Pros

- Easy to learn
- Compact and understandable code
- Widely used (has broad support)
- Many libraries

::::
:::: {.column width=50%}

### Cons

- Very high level
- Slow (compared to C)
- Not strongly typed

::::
:::

## Uses

**Python** is used in many fields, such as:

- **Data Analysis**: Pandas, Numpy, etc.
- **Artificial Intelligence**: Machine Learning, Deep Learning, etc.
- **Web Development**: Django, Flask, etc.
- **Automation**: Scripts, bots, etc.
- **Industry**: Automation, IoT, etc.
- **Games**: Pygame, Panda3D, etc.
- etc.

# Environment

## Installation

There are various ways to work with Python, depending on the environment you want to use, its purpose, and the operating system.

- **Local**: Installation on your own computer
    - **Anaconda**: Python distribution that includes libraries and a development environment.
    - **pip**: Python package installer.
- **Online**: Online platforms like Google Colab, Jupyter Notebook, etc.

## Interpreter

Python is an interpreted language, meaning that the code is executed line by line.
Python can be used as an **interactive interpreter** where one line of code is executed at a time.

``` {python}
#| output: true
print("Hello World!")
```

This is usually done from a command terminal:

``` {.bash}
python
```

## Python File

The most common use of Python is to write a *script* in a file with the `.py` extension.
These files are executed via the Python interpreter, which reads and executes the code line by line.

``` {python}
#| output: true
# File: hello.py
s = "Hello World!"
print(s)
```

To execute the file, use the terminal:

``` {.bash}
python hello.py
```

## Jupyter Notebook

::: {.columns}
:::: {.column width=50%}

Jupyter Notebook is a document format that allows combining text and graphics with Python code.
This is the most widely used tool in the fields of data science and machine learning.

- **Interactive**: Runs cell by cell
- **Visual**: Displays graphics and text
- **Exportable**: To HTML, PDF, etc.

::::
:::: {.column width=50%}

![](../../resources/images/jupyter.png){width=50% fig-align="center"}

::::
:::

## Google Colab

::: {.columns}
:::: {.column width=50%}

Google Colab is a free platform from Google that allows running Jupyter notebooks in the cloud.
It offers many advantages:

- **Notebook**: Works natively with Jupyter notebooks
- **Online**: No installation or updates required
- **Cloud**: Independent of the device (no hardware or compatibility issues)
- **Dependencies**: Includes many pre-installed libraries with consistent versions for all users

::: {.callout-important}
This is the recommended platform for the course.
:::

::::
:::: {.column width=50%}

![](../../resources/images/colab.png){width=80% fig-align="center"}

::::
:::

# Language Basics

## Variables

Variables in Python are **dynamically typed**, meaning you don't specify the variable type when declaring it.

``` {python}
#| output: true
x = 5       # int
y = "Hello" # str
print(x, y)
```

## Assignment

Values are assigned to variables using the `=` operator.

``` {python}
#| output: true
x = 5  # x is 5
y = x  # y is 5
x = 3  # x is 3
a, b = x, 2 # a is 3, b is 2
print(x, y, a, b)
```

## Comments

Anything written after a `#` or within `"""` is a comment and will not be executed.

``` {python}
#| output: true
x = 5
# This is a comment
# x = 3
""" x = 2 """
print(x)
```

## Data Types

Python has several basic data types:

- **Numeric**: `int`, `float`
- **Text**: `str`
- **Booleans**: `bool`
- **Sequences**: `list`, `tuple`
- **Sets**: `set`
- **Dictionaries**: `dict`

``` {python}
#| output: true
x = 5       # int
y = 5.0     # float
z = "Hello" # str
print(type(x), type(y), type(z))
```

## Casting

You can change the type of a variable using *casting*.

``` {python}
#| output: true
x = 5       # int
y = str(x)  # str
print(y, type(y))
```

## Arithmetic Operators

``` {python}
#| output: true
x = 5   # int
y = 2   # int
print(x + y)  # Add
print(x - y)  # Subtract
print(x * y)  # Multiply
print(x / y)  # Divide
print(x % y)  # Modulus
print(x ** y) # Exponentiation
print(x // y) # Floor division
```

## Logical Operators

``` {python}
#| output: true
x = True   # bool
y = False  # bool
print(not x)   # Not
print(x and y) # And
print(x or y)  # Or
```

`0`, empty strings, empty lists, etc., are considered `False` in Python.

``` {python}
#| output: true
x = 0   # int -> False
y = ""  # str -> False
print(bool(x), bool(y))
```

## Comparison Operators

``` {python}
#| output: true
x = 5  # int
y = 2  # int
print(x == y) # Equal
print(x != y) # Not equal
print(x > y)  # Greater than
print(x >= y) # Greater than or equal
print(x < y)  # Less than
print(x is y) # Same object
```

# Data Types

## Lists

Lists are an ordered and mutable collection of elements.

``` {python}
#| output: true
l = [1, 2, 3, 4, 5]  # list
print(l)
```

## Lists - Accessing Elements

To access an element in a list, use the `[]` operator.

``` {python}
#| output: true
l = [1, 2, 3, 4, 5]
print(l[0])   # First element
print(l[-1])  # Last element
print(l[1:3]) # Slice [2,3]
```

## Lists - Modification

Elements in a list can be modified by accessing them with `[]`. Lists can also be extended using `append` and concatenated with `+`.

``` {python}
#| output: true
l = [1, 2]  # list
print(l)
l[0] = 0    # l = [0,2]
print(l)
l.append(3) # l = [0,2,3]
print(l)
l = l + l   # l = [0,2,3,0,2,3]
print(l)
```

## Tuples

Tuples are an ordered and immutable collection of elements.
They are accessed like lists but cannot be modified.

``` {python}
#| output: true
t = (1, 2, 3, 4, 5)
print(t)
print(t[1:3])
```

## Sets

Sets are an unordered and mutable collection of unique elements.
You cannot access elements directly except through iteration, but elements can be added or removed.

``` {python}
#| output: true
s = {1, 2, 3, 4, 5}
print(s)
s.add(6)
print(s)
s.add(6)
print(s)
s.remove(1)
print(s)
```

## Dictionaries

Dictionaries are an unordered collection of key-value pairs.

``` {python}
#| output: true
d = {"a": 1, "b": 2, "c": 3}
print(d)
print(d["a"])
d["a"] = 0
print(d)
```

## Strings

Strings are tuples of characters with specific methods.

``` {python}
#| output: true
s = "Hello World!"
print(s)
print(s[0])
print(s[1:5])
```

## String - Methods

``` {python}
#| output: true
s = "Hello World!"
print(s.upper())
print(s.lower())
print(s.replace("H", "J"))
print(s.split(" "))
print(s.find("W"))
```

# Control Flow

## Blocks

Code blocks in Python are defined by indentation (spaces or tabs at the beginning of a line).
Therefore, it is very important to maintain the correct indentation.

``` {python}
#| output: true
if True:
    print("Block 1")
    if False:
        print("Block 2")
print("Block 3")
```

## Conditionals

Conditionals in Python are written using `if`, `elif`, and `else`.

``` {python}
#| output: true
x = 5
if x > 5:
    print("Greater than 5")
elif x < 5:
    print("Less than 5")
else:
    print("Equal to 5")
```

## While Loop

The `while` loop runs as long as the condition is true.

``` {python}
#| output: true
x = 0
while x < 5:
    print(x)
    x += 1
```

## For Loop

The `for` loop is used to iterate over a sequence.

``` {python}
#| output: true
l = [1, 2, 3, 4, 5]
for x in l:
    print(x)
```

## For Loop - Range

The `range` function generates a sequence of numbers.

``` {python}
#| output: true
for x in range(5):
    print(x)
```

## Loop Operators

The `break` operator is used to exit a loop.
The `continue` operator is used to skip to the next iteration.

``` {python}
#| output: true
for x in range(5):
    if x % 2:
        continue
    if x == 4:
        break
    print(x)
```

# Functions

## Libraries

Python has a large number of libraries that can be imported and used.
To import, use the keyword `import`. Libraries can also be renamed with `as`.

``` {python}
#| output: true
import numpy        # To use numpy, use numpy.function()
import numpy as np  # To use numpy, use np.function()
```

## Functions

Functions in Python are defined using the `def` keyword.
They are used to encapsulate and reuse code.

``` {python}
#| output: true
def my_function():
    print("Hello from a function")

my_function()
my_function()
```

## Functions - Arguments

Functions can take arguments, which are passed when calling the function.
Arguments can be used by position or by name. Default arguments can also be defined, which are used if not explicitly specified when calling the function.

``` {python}
#| output: true
def my_function(name, age=25):
    print(f"Hello {name}, you are {age} years old")

my_function("Alice")
my_function(age=30, name="Bob")
```

## Functions - Return

Functions can return a value using the `return` keyword.

``` {python}
#| output: true
def my_function(x):
    return x * 2

print(my_function(3))
print(my_function(5))
```

## Built-in Functions

These are some frequently used built-in functions in Python:

- `print`: Prints to the screen
- `range`: Returns an iterable sequence of numbers
- `len`: Returns the length of an iterable or container
- `input`: Reads from the keyboard
- `sum`: Returns the sum of elements in an iterable
- `min`: Returns the minimum of elements in an iterable
- `max`: Returns the maximum of elements in an iterable
- `any`: Returns `True` if any element in an iterable is `True`
- `all`: Returns `True` if all elements in an iterable are `True`
- `sorted`: Returns a sorted list of elements in an iterable

# Classes

## Classes

To create more complex data structures, you can use classes.
The `class` keyword is used to define a class.

``` {python}
#| output: true
class MyClass:
    x = 5

c = MyClass()
print(c.x)
```

## Classes - Methods

Classes can have methods, which are functions that belong to the class.
The first argument of a method is the object calling it, conventionally called `self`.

``` {python}
#| output: true
class MyClass:
    def my_method(self):
        print("Hello from a method")

c = MyClass()
c.my_method()
```

## Classes - Built-in Methods

There are several special methods that can be defined in a class:

- `__init__`: Class constructor
- `__str__`: String representation of the class
- `__len__`: Length of the class
- `__getitem__`: Access elements using `[]`
- etc.

# Advanced

## List Comprehension

`List comprehension` is a quick and compact way to create lists.

``` {python}
#| output: true
l1 = [x for x in range(5)]
print(l1)

l2 = [x for x in range(5) if x % 2]
print(l2)
```

## Lambda

`Lambda` is a way to define anonymous functions in a single line.

``` {python}
#| output: true
f = lambda x: x * 2
print(f(3))

# Sort by the second element
l = [(1, 2), (3, 1), (5, 3)]
l.sort(key=lambda x: x[1])
```

## Enumerate

`enumerate` is a function that returns an iterable with indices and values.

``` {python}
#| output: true
l = ["a", "b", "c"]
for i, x in enumerate(l):
    print(i, x)
```

## Working with Dictionaries

Dictionaries can be iterated by key, value, or both.

``` {python}
#| output: true
d = {"a": 1, "b": 2, "c": 3}
for k in d.keys():
    print(k)

for v in d.values():
    print(v)

for k, v in d.items():
    print(k, v)
```

## Iterating Over Multiple Values

You can create loops that iterate over more than one iterable at a time when the iterable is a collection. The `zip` function creates an iterable that groups elements from the iterables it is passed.

``` {python}
#| output: true
l1 = [1, 2, 3]
l2 = ["a", "b", "c"]
for x, y in zip(l1, l2):
    print(x, y)
```

## Inheritance

Inheritance is an object-oriented programming feature that allows creating a new class from an existing one.

``` {python}
#| output: true
class Parent:
    def __init__(self, x):
        self.x = x

class Child(Parent):
    def __init__(self, x, y):
        super().__init__(x)
        self.y = y

c = Child(1, 2)
print(c.x, c.y)
```

## Much More

The Python language is very extensive and has many more features and functionalities.
This topic provides a basic overview of the main ideas and the most commonly used elements of the language.

We encourage students to explore more about the language and delve deeper into areas that interest them the most.

![](../../resources/images/python.png){width=30% fig-align="center"}
